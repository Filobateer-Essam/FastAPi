[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi.params",
        "description": "fastapi.params",
        "isExtraImport": true,
        "detail": "fastapi.params",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "class Post(BaseModel):\n    title: str\n    content: str\n    published: bool = True\ntry:\n    # Connect to database here\n    conn = psycopg2.connect(host='localhost',\n    database = 'fastapi', user = 'postgres' , password = 'sniper1',cursor_factory= RealDictCursor)\n    cursor = conn.cursor()\n    print(\"Connect To Database Successfully ðŸ˜ŽðŸ˜Ž\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "findpost",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def findpost(id):\n    for p in my_posts:\n        if p[\"id\"] == id:\n            return p\ndef findIndexArr(id):\n    for i, post in enumerate(my_posts):\n        if post[\"id\"] == id:\n            return i\n@app.get(\"/\") # called decorator which is used to define the path of the API\ndef root():",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "findIndexArr",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def findIndexArr(id):\n    for i, post in enumerate(my_posts):\n        if post[\"id\"] == id:\n            return i\n@app.get(\"/\") # called decorator which is used to define the path of the API\ndef root():\n    return {\"message\": \"Hello, World!\"}\n# Get All Posts\n@app.get(\"/posts\")\ndef get_posts():",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"message\": \"Hello, World!\"}\n# Get All Posts\n@app.get(\"/posts\")\ndef get_posts():\n    return {\"data\": my_posts}\n# Get the Latest Post\n@app.get(\"/posts/latest\")\ndef get_latest_post():\n    lst_posts = []",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_posts():\n    return {\"data\": my_posts}\n# Get the Latest Post\n@app.get(\"/posts/latest\")\ndef get_latest_post():\n    lst_posts = []\n    for i in range(len(my_posts) - 1, 1, -1):\n        lst_posts.append(my_posts[i])\n    print(lst_posts)\n    return {\"latest Posts\" : lst_posts}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_latest_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_latest_post():\n    lst_posts = []\n    for i in range(len(my_posts) - 1, 1, -1):\n        lst_posts.append(my_posts[i])\n    print(lst_posts)\n    return {\"latest Posts\" : lst_posts}\n    # l_p = my_posts[len(my_posts) - 1]\n    # return {\"latest_post\" :l_p }\n# Get ID of Post\n@app.get(\"/posts/{id}\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_postID",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_postID(id : int ):\n    post = findpost(id)\n    if not post :\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= f\"Post not found for id {id}\")\n    print(post)\n    return {\"post\": post}\n@app.post(\"/posts\" ,status_code=status.HTTP_201_CREATED)\ndef create_post(new_post:Post):\n    print(new_post)\n    print(new_post.model_dump()) # Convert to json format",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def create_post(new_post:Post):\n    print(new_post)\n    print(new_post.model_dump()) # Convert to json format\n    post_dict = new_post.model_dump()\n    post_dict[\"id\"] = randrange(0,100000000)\n    my_posts.append(post_dict)  # Add new post to the list of posts\n    return {\"data\": post_dict}\n@app.delete(\"/posts/{id}\")\ndef delete_post(id : int):\n    post = findpost(id)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def delete_post(id : int):\n    post = findpost(id)\n    post_index = findIndexArr(id)\n    print(post_index)\n    if post not in my_posts:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post not found for id {id}\")\n    my_posts.remove(post)\n    return {\"detail\": f\"Post index in Array is {post_index} with id {id}  has been deleted.\"}\n@app.put(\"/posts/{id}\")\ndef update_post(id : int , post: Post):",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def update_post(id : int , post: Post):\n    post_index = findIndexArr(id)\n    print(post_index) # the place in the Array not the actual id\n    post_withID = findpost(id)\n    if post_withID not in my_posts:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post not found for id {id}\")\n    else:\n        # must convert th e Object into Dic first \n        post_dict = post.model_dump()\n        post_dict[\"id\"] = id  # replace id with the actual id",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\nclass Post(BaseModel):\n    title: str\n    content: str\n    published: bool = True\ntry:\n    # Connect to database here\n    conn = psycopg2.connect(host='localhost',\n    database = 'fastapi', user = 'postgres' , password = 'sniper1',cursor_factory= RealDictCursor)\n    cursor = conn.cursor()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "my_posts",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "my_posts = [\n    {\n        \"title\": \"First Post\",\n        \"content\": \"This is the first post\",\n        \"id\" : 1\n    },\n    {\n        \"title\": \"Second Post\",\n        \"content\": \"This is the second post\",\n         \"id\" : 2",
        "detail": "app.main",
        "documentation": {}
    }
]